#!/bin/bash

set -euo pipefail

# cd to curdir
SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
cd $SCRIPT_DIR

# Figure out the OS type
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     jqLink="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64";;
    Darwin*)    jqLink="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64";;
    *)          jqLink="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64"
esac

## echo "Downloading jq 1.6 ..."
curl -sSLk $jqLink -o ./jq.local
chmod +x ./jq.local

## User specific configuration <-----------
OCM_API_ENDPOINT="{{ assisted_service_endpoint }}"

CLUSTER_ID="{{ cluster_id }}" # Copy from Assisted Installer URL
{% if assisted_service_authentication != "none" %}
TOKEN='{{ tmp_auth_header_fact.Authorization }}'
{% endif %}

PASS_HASH='{{ passwordHash }}'
###############################

function log() {
    if [[ ! $? == 0 ]]; then
        echo "Script enountered an error"
        exit 1
    fi
}

trap log EXIT

DISCOVERY_IGN_URL=$OCM_API_ENDPOINT/clusters/$CLUSTER_ID/downloads/'files?file_name=discovery.ign'

{% if assisted_service_authentication != "none" %}
if ! curl -sSLk --fail ${DISCOVERY_IGN_URL} -H "Authorization: $TOKEN" >/dev/null; then
{% else %}
if ! curl -sSLk --fail ${DISCOVERY_IGN_URL} >/dev/null; then
{% endif %}
    echo "Can't seem to find a discovery.ign, please generate a discovery ISO file using the UI first"
    exit 1
fi

## echo "Downloading the original ignition file into the ORIGINAL_IGNITION variable"
{% if assisted_service_authentication != "none" %}
ORIGINAL_IGNITION=$(curl --fail -sSLk ${DISCOVERY_IGN_URL} -H "Authorization: $TOKEN")
{% else %}
ORIGINAL_IGNITION=$(curl --fail -sSLk ${DISCOVERY_IGN_URL})
{% endif %}

echo $ORIGINAL_IGNITION > original-ignf.tmp

## echo "Modifying ORIGINAL_IGNITION to contain the new password hash rather than the previous one"
NEW_IGNITION=$(<<< "$ORIGINAL_IGNITION" ./jq.local --arg passhash $PASS_HASH '.passwd.users[0].passwordHash = $passhash')

echo $NEW_IGNITION > new-ignf.tmp

PATCHED_JSON=$(echo '{"config": "replaceme"}' | ./jq.local --rawfile ignition new-ignf.tmp '.config = $ignition')

echo $PATCHED_JSON > patched-ignf.tmp

## echo "Telling service to use our patched ignition file"
{% if assisted_service_authentication != "none" %}
curl --fail -sSLk $OCM_API_ENDPOINT/clusters/$CLUSTER_ID/discovery-ignition -H "Authorization: $TOKEN" --request PATCH --header "Content-Type: application/json" --data @patched-ignf.tmp
{% else %}
curl --fail -sSLk $OCM_API_ENDPOINT/clusters/$CLUSTER_ID/discovery-ignition --request PATCH --header "Content-Type: application/json" --data @patched-ignf.tmp
{% endif %}

rm ./jq.local original-ignf.tmp patched-ignf.tmp new-ignf.tmp

echo "FINISHED"