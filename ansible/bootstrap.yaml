---
- name: Create an Assisted Installer provisioned OpenShift Cluster on Libvirt/KVM
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    cluster_id: ""
    cluster_status: ""
    deployment_name: ""

  tasks:
    - name: Read in variables
      include_vars:
        dir: vars
        extensions:
          - 'yaml'
          - 'yml'

    - name: Preflight Checks
      include_tasks: tasks/preflight.yaml

    - name: Read AI Service, check for existing cluster
      uri:
        url: "{{ assisted_service_endpoint }}/clusters"
        return_content: yes
        method: GET
      register: read_clusters
    
    - name: Set facts if cluster exists
      set_fact:
        cluster_id: "{{ item.id }}"
        cluster_status: "{{ item.status }}"
      loop: "{{ read_clusters.json }}"
      when: (item.base_dns_domain == cluster_domain) and (item.name == cluster_name)

    # y tho? oh yeah, if importing, duh lololo
    - name: Create Cluster Asset Generation Directory
      file:
        path: "{{ generated_asset_directory }}/{{ cluster_id }}"
        state: directory
      when: cluster_id != ""

    - name: Create Cluster if it does not already exist
      block:
        - name: Set random var for this deployment json run
          set_fact:
            deployment_name: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"

        - name: SSH Key Generation & Reading
          include_tasks: tasks/ssh_keys.yaml

        - name: Create the base cluster deployment definition
          include_tasks: tasks/ai_svc_create_cluster.yaml
      when: cluster_id == ""

    - name: Set Cluster Configuration
      block:

        - name: Create Cluster Asset Generation Directory
          file:
            path: "{{ generated_asset_directory }}/{{ cluster_id }}"
            state: directory

        - name: Copy deployment file into cluster directory
          copy:
            remote_src: true
            src: "{{ generated_asset_directory }}/deployment-{{ deployment_name }}.json"
            dest: "{{ generated_asset_directory }}/{{ cluster_id }}/deployment.json"

        - name: Remove old named deployment.json
          file:
            path: "{{ generated_asset_directory }}/deployment-{{ deployment_name }}.json"
            state: absent

        - name: SSH Key Migration
          include_tasks: tasks/ssh_keys.yaml

        - name: Patch in Cluster Preconfiguration for Networking
          include_tasks: tasks/ai_svc_preconfig_networking.yaml

        - name: Configure ISO Parameters
          include_tasks: tasks/ai_svc_configure_iso_params.yaml
          
      when: deployment_name != ""

    - name: Download ISO if needed
      block:
        - name: Check for existing ISO
          ansible.builtin.stat:
            path: "{{ generated_asset_directory }}/{{ cluster_id }}/ocp_ai.iso"
          register: iso_check

        - name: Pull OpenShift ISO if needed
          get_url:
            url: "{{ assisted_service_endpoint }}/clusters/{{ cluster_id }}/downloads/image"
            dest: "{{ generated_asset_directory }}/{{ cluster_id }}/ocp_ai.iso"
          when: not iso_check.stat.exists

    - name: Create Libvirt Infrastructure
      block:

      - name: Create Disks via QEMU
        include_tasks: tasks/libvirt_create_disks.yaml

      #- name: Create VMs via Libvirt
      #  include_tasks: libvirt_create_vms.yaml
      #  become: yes
      become: yes