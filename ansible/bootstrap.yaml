---
- name: Create an Assisted Installer provisioned OpenShift Cluster on Libvirt/KVM
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    cluster_id: ""
    cluster_status: ""
    deployment_name: ""
    compiled_uri_headers:
      User-Agent: AnsibleAutomation/4.2

  tasks:
    - name: Read in variables
      include_vars:
        dir: vars
        extensions:
          - 'yaml'
          - 'yml'

    - name: Preflight Checks
      include_tasks: tasks/preflight.yaml

    - name: Set up Authentication Headers if needed
      include_tasks: tasks/ai_svc_setup_auth_headers.yaml
      when: assisted_service_authentication != "none"

    - name: Preflight Version Checks
      include_tasks: tasks/ai_svc_query_openshift_versions.yaml

    - name: Read AI Service, check for existing cluster
      uri:
        headers: "{{ compiled_uri_headers }}"
        url: "{{ assisted_service_endpoint }}/clusters"
        return_content: yes
        method: GET
      register: read_clusters
    
    - name: Set facts if cluster exists
      set_fact:
        cluster_id: "{{ item.id }}"
        cluster_status: "{{ item.status }}"
      loop: "{{ read_clusters.json }}"
      when: (item.base_dns_domain is defined) and ((item.base_dns_domain == cluster_domain) and (item.name == cluster_name))

    # y tho? oh yeah, if importing, duh lololo
    - name: Create Cluster Asset Generation Directory
      file:
        path: "{{ generated_asset_directory }}/{{ cluster_id }}"
        state: directory
      when: cluster_id != ""

    - name: Create Cluster if it does not already exist
      block:
        - name: Set random var for this deployment json run
          set_fact:
            deployment_name: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"

        - name: SSH Key Generation & Reading
          include_tasks: tasks/ssh_keys.yaml

        - name: Create the base cluster deployment definition
          include_tasks: tasks/ai_svc_create_cluster.yaml
      when: cluster_id == ""

    - name: Set Cluster Configuration
      block:

        - name: Create Cluster Asset Generation Directory
          file:
            path: "{{ generated_asset_directory }}/{{ cluster_id }}"
            state: directory

        - name: Copy deployment file into cluster directory
          copy:
            remote_src: true
            src: "{{ generated_asset_directory }}/deployment-{{ deployment_name }}.json"
            dest: "{{ generated_asset_directory }}/{{ cluster_id }}/deployment.json"

        - name: Remove old named deployment.json
          file:
            path: "{{ generated_asset_directory }}/deployment-{{ deployment_name }}.json"
            state: absent

        - name: SSH Key Migration
          include_tasks: tasks/ssh_keys.yaml

        - name: Patch in Cluster Preconfiguration for Networking
          include_tasks: tasks/ai_svc_preconfig_networking.yaml

        - name: Configure ISO Parameters
          include_tasks: tasks/ai_svc_configure_iso_params.yaml
          
      when: deployment_name != ""

    - name: Download ISO if needed
      block:
        - name: Check for existing ISO
          ansible.builtin.stat:
            path: "{{ generated_asset_directory }}/{{ cluster_id }}/ocp_ai.iso"
          register: iso_check

        - name: Pull OpenShift ISO if needed
          get_url:
            headers: "{{ compiled_uri_headers }}"
            url: "{{ assisted_service_endpoint }}/clusters/{{ cluster_id }}/downloads/image"
            dest: "{{ generated_asset_directory }}/{{ cluster_id }}/ocp_ai.iso"
          when: not iso_check.stat.exists

        - name: Copy OpenShift ISO to target Libvirt path
          copy:
            src: "{{ generated_asset_directory }}/{{ cluster_id }}/ocp_ai.iso"
            dest: "{{ libvirt_base_iso_path }}/ocp_ai-{{ cluster_id }}.iso"

    - name: Set core user password
      block:      
      - name: Get Discovery Ignition
        uri:
          headers: "{{ compiled_uri_headers }}"
          url: "{{ assisted_service_endpoint }}/clusters/{{ cluster_id }}/downloads/files?file_name=discovery.ign"
          return_content: yes
          method: GET
          status_code: 200
        register: set_cluster_discovery_ignition
        until: set_cluster_discovery_ignition is not failed
        retries: 30
        delay: 10

      - name: Set core password if still the default
        block:
        - name: Set core user password
          include_tasks: tasks/ai_svc_set_core_user_password.yaml

        - name: Re-Configure ISO Parameters to Regenerate Discovery Ignition
          include_tasks: tasks/ai_svc_configure_iso_params.yaml
        when: (set_cluster_discovery_ignition.content | from_json).passwd.users[0].passwordHash == '!'
      when: core_user_password is defined

    - name: Create Libvirt Infrastructure
      block:
      - name: Create Disks via QEMU
        include_tasks: tasks/libvirt_create_disks.yaml
        loop: "{{ cluster_nodes }}"
        loop_control:
          loop_var: node

      - name: Detach devices from host system for VMs
        include_tasks: tasks/libvirt_detach_devices.yaml
        loop: "{{ cluster_nodes }}"
        loop_control:
          loop_var: node
        when: node.pci_devices is defined

      - name: Create VMs via Libvirt
        include_tasks: tasks/libvirt_create_vms.yaml
      become: yes
      tags:
        - create_libvirt_cluster
      
    - name: Wait for hosts to report into the Assisted Installer service
      include_tasks: tasks/ai_svc_check_for_hosts.yaml

    - name: Set Host Names and Roles for Standard HA OpenShift Cluster
      include_tasks: tasks/ai_svc_set_host_names_roles.yaml
      when: cluster_type == "Standard"

    - name: Set Network VIPs
      include_tasks: tasks/ai_svc_set_vips.yaml

    - name: Check to make sure the hosts are ready and the cluster can be installed
      include_tasks: tasks/ai_svc_check_install_ready.yaml

    - name: Set Cilium Networking Cluster Manifests
      include_tasks: tasks/networking_cilium.yaml
      when: cluster_network_type == "Cilium"

    - name: Set Calico Networking Cluster Manifests
      include_tasks: tasks/networking_calico.yaml
      when: cluster_network_type == "Calico"

    - name: Start the Cluster installation
      include_tasks: tasks/ai_svc_start_install.yaml

    - name: Reboot Libvirt VMs
      block:
      - name: Set blank fact for VM list
        set_fact:
          vm_names: []
          shutdown_vms: []

      - name: Add VM Names to fact
        set_fact:
          vm_names: "{{ vm_names + [cluster_name+'-'+item.name] }}"
        loop: "{{ cluster_nodes }}"
        
      - name: Check for Libvirt VM Rebooting
        include_tasks: tasks/libvirt_reboot_vms.yaml
        vars:
          task_vm_names: "{{ vm_names }}"
          task_shutdown_vms: "{{ shutdown_vms }}"
      become: yes
      when: libvirt_watch_for_vm_restart|bool

    - name: Wait for the cluster to be fully installed
      include_tasks: tasks/ai_svc_check_cluster_install_finished.yaml

    - name: Pull cluster credentials
      include_tasks: tasks/ai_svc_query_cluster_credentials.yaml

    - name: Deploy default post-installation cluster workloads
      include_tasks: "{{ item }}"
      with_fileglob:
        - post-tasks/*.yml
        - post-tasks/*.yaml